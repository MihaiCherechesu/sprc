/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "api.hpp"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

rpc_msg_ *
login_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, LOGIN,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
logout_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, LOGOUT,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
load_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, LOAD,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
store_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, STORE,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
add_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, ADD,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
del_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, DEL,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
update_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, UPDATE,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
read_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, READ,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
get_stat_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, GET_STAT,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

rpc_msg_ *
get_stat_all_1(rpc_msg_ *argp, CLIENT *clnt)
{
	static rpc_msg_ clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, GET_STAT_ALL,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) argp,
		(xdrproc_t) xdr_rpc_msg_, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}
